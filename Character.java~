/**
 * [Character.java]
 * @author: Jillian and Ellie
 * @version: June 2022
 */
import java.awt.Graphics;
import java.io.File;
import java.awt.Color;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.Rectangle;
// possible exceptions
import java.io.IOException;

abstract class Character implements Collidable{
  private final int LEFT = 1;
  private final int RIGHT = 2;
  private final int UP = 3;
  private final int DOWN = 0;
  
    // graphics
  private BufferedImage[][] frames;
  private BufferedImage frameDead;
  private BufferedImage frameHit;
  private int row;
  private int col;
  private int x;
  private int y;
  private int width;
  private int height;
  private double angle;
  private Rectangle box;
  
  //character stats
  private int hitFrameCount = 0;
  private int hp; //health points
  private boolean playable;
  private boolean isDead;
  private boolean isHit;
  private Weapon weapon;
    
//------------------------------------------------------------------------------    
    Character(int x, int y, String picName, int rows, int columns,int hp, boolean playable, Weapon weapon){ 
        this.x = x;
        this.y = y;
        frames = new BufferedImage[rows][columns]; 
        //load all images for character
        try {
            for (int row=0; row<rows; row++){
                for (int col=0; col<columns; col++){
                    frames[row][col] = ImageIO.read(new File(picName+row+col+".png"));
                }
            }
            frameDead = ImageIO.read(new File(picName+"Dead.png"));
            frameHit = ImageIO.read(new File(picName+"Hit.png"));
        } catch (IOException ex){System.out.println("Failed");}
        row = 0;
        col = 0;
        this.width = frames[row][col].getWidth();
        this.height = frames[row][col].getHeight();
        this.box = new Rectangle(this.x, this.y, this.width, this.height);
        
        this.hp = hp;
        this.playable = playable;
        this.weapon = weapon;
        
        this.isDead = false;
        this.isHit = false;
    }
// Getters and setters-----------------------------------------------------
    public int getX(){
        return this.x;
    }
    public int getY(){
        return this.y;
    }
    
    public void setX(int x){
        this.x = x;
    }
    public void setY(int y){
        this.y = y;
    }
    
    public int getW(){
      return this.width;
    }
    
    public int getH(){
      return this.width;
    }
    
    public void setBox(){
        this.box.setLocation(this.x, this.y); 
    }
    
    public Rectangle getBox() {
      return this.box;
    }
    
    //Character Stats methods ---------------------------------------------------------------------------------------
    
    public int getHp(){
      return this.hp;
    }
    public void setHp(int hp){
      this.hp = hp;
    }
    public boolean getPlayable(){
      return this.playable;
    }
    public void setPlayableFalse(){
      this.playable = false;
    }
    public void setWeapon(Weapon weapon){
      this.weapon = weapon;
    }
    public Weapon getWeapon(){
      return this.weapon;
    }
    
    public void die(){
      this.isDead = true;
    }
    
    public boolean getIsDead(){
      return this.isDead;
    }
    
    public void hit(){
      if (!isDead){
        this.hp -= 1; //every time hit remove hp
        isHit = true;
        if (this.hp == 0){this.die();}
      }
  }
    
    // calculations----------------------------------------------------------------------------------------
    
    public double calculateAngle(int targetX,int targetY){
      int weaponX = this.getX();
      int weaponY = this.getY();
      double angle = -Math.toDegrees(Math.atan2(targetY-weaponY,targetX-weaponX));
      this.setAngle(angle);
      return angle;
    }
    
    public void setAngle(double angle){
      this.angle = angle;
    }
    
    public double getAngle(){
      return this.angle;
    }
//------------------------------------------------------------------------------    
    public void draw(Graphics g){
      if (isHit){
        g.drawImage(this.frameHit, this.x, this.y, null);
        hitFrameCount++;
        if (hitFrameCount == 10){
          this.isHit = false;
          hitFrameCount = 0;
        }
      }
      else if (!isDead){g.drawImage(this.frames[this.row][this.col], this.x, this.y, null);}
      else{g.drawImage(this.frameDead, this.x, this.y, null);}
    }
    
    public void moveLeft(boolean move){
        this.row = LEFT;
        this.col = (this.col + 1)%frames[row].length;
        if (move){this.x -= PlayerConst.STEP/2;}
        this.setBox();
        if (this.weapon != null){
          this.setWeaponPosition();
        }
    }
    public void moveRight(boolean move){
        this.row = RIGHT;
        this.col = (this.col + 1)%frames[row].length;
        if (move){this.x += PlayerConst.STEP/2;}
        this.setBox();
        if (this.weapon != null){
          this.setWeaponPosition();
        }
    }
    public void moveUp(boolean move){
        this.row = UP;
        this.col = (this.col + 1)%frames[row].length;
        if (move){this.y -= PlayerConst.STEP/2;}
        this.setBox();
        if (this.weapon != null){
          this.setWeaponPosition();
        }
    }
    public void moveDown(boolean move){
        this.row = DOWN;
        this.col = (this.col + 1)%frames[row].length;
        if (move){this.y += PlayerConst.STEP/2;}
        this.setBox();
        if (this.weapon != null){
          this.setWeaponPosition();
        }
    }
    
    private void setWeaponPosition(){
      this.weapon.setX(this.getX());
      this.weapon.setY(this.getY() + this.getH()/2);
    }
    
    @Override
    public boolean collides(Character other){
      return this.getBox().intersects(other.getBox());
    }
    
    @Override
    public boolean collides(GameObject other){
      return this.getBox().intersects(other.getBox());
    }
    
    public void reverse(int targetX,int targetY){
      this.calculateAngle(targetX, targetY);
      int vectorX = (int)(Math.round(5*Math.cos(Math.toRadians(-this.getAngle()))));
      int vectorY = (int)(Math.round(5*Math.sin(Math.toRadians(-this.getAngle()))));   
      this.setX(this.getX() - vectorX);
      this.setY(this.getY() - vectorY);
      if (this.weapon != null){this.setWeaponPosition();}
      this.setBox();     
    }
}